cmake_minimum_required(VERSION 2.8.8)
set(PROJECT_NAME_STR pinballdevice)
project(${PROJECT_NAME_STR} C CXX)

if(CMAKE_COMPILER_IS_GNUCXX)
    add_definitions(-Wall -Wno-deprecated)
endif()

#-------------------
# set common include folder for module
#-------------------
set(COMMON_INCLUDES ${PROJECT_SOURCE_DIR}/include)
set(EXT_PROJECTS_DIR ${PROJECT_SOURCE_DIR}/ext)

#-------------------
# Module source
#-------------------
set(PROJECT_LIB_NAME ${PROJECT_NAME_STR})

include_directories(${COMMON_INCLUDES})
file(GLOB SRC_FILES ${PROJECT_SOURCE_DIR}/src/*.c)
add_library(${PROJECT_LIB_NAME} ${SRC_FILES})

if    (CMAKE_SYSTEM_PROCESSOR STREQUAL  cortex-m0)
    #...
elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL  cortex-m0+)
    #...
elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL  cortex-m3)
    add_definitions(-DCONFIG_UNALIGNED_ACCESS=1)
elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL  cortex-m4)
    add_definitions(-DCONFIG_UNALIGNED_ACCESS=1)
elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL  cortex-m4f)
    add_definitions(-DCONFIG_UNALIGNED_ACCESS=1)
else()
    find_package(Threads REQUIRED)

    if(CMAKE_COMPILER_IS_GNUCXX)
        add_definitions(-Wall -Wno-deprecated -pthread)
    endif()

    if(MSVC)
        #vc 2012 fix for vararg templates
        set(MSVC_COMPILER_DEFS "-D_VARIADIC_MAX=10")
    endif() 

    add_subdirectory(${EXT_PROJECTS_DIR}/gtest)

    #-------------------
    # Test
    #-------------------
    add_definitions(${MSVC_COMPILER_DEFS})
    enable_testing()
    set(PROJECT_TEST_NAME ${PROJECT_NAME_STR}_test)
    include_directories(${GTEST_INCLUDE_DIRS} ${COMMON_INCLUDES})
    include_directories(${GMOCK_INCLUDE_DIRS} ${COMMON_INCLUDES})

    file(GLOB TEST_SRC_FILES ${PROJECT_SOURCE_DIR}/test/*.cpp)
    add_executable(${PROJECT_TEST_NAME} ${TEST_SRC_FILES})
    add_dependencies(${PROJECT_TEST_NAME} googletest)

    if(NOT WIN32 OR MINGW)
        target_link_libraries(${PROJECT_TEST_NAME}
            ${GTEST_LIBS_DIR}/libgtest.a
            ${GTEST_LIBS_DIR}/libgtest_main.a
            ${GMOCK_LIBS_DIR}/libgmock.a
            ${GMOCK_LIBS_DIR}/libgmock_main.a
            )
        if(NOT MINGW)
            target_link_libraries(${PROJECT_TEST_NAME} gcov)
        endif()
    else()
        target_link_libraries(${PROJECT_TEST_NAME}
            debug ${GTEST_LIBS_DIR}/DebugLibs/${CMAKE_FIND_LIBRARY_PREFIXES}gtest${CMAKE_FIND_LIBRARY_SUFFIXES}
            optimized ${GTEST_LIBS_DIR}/ReleaseLibs/${CMAKE_FIND_LIBRARY_PREFIXES}gtest${CMAKE_FIND_LIBRARY_SUFFIXES}
            )
        target_link_libraries(${PROJECT_TEST_NAME}
            debug ${GTEST_LIBS_DIR}/DebugLibs/${CMAKE_FIND_LIBRARY_PREFIXES}gtest_main${CMAKE_FIND_LIBRARY_SUFFIXES}
            optimized ${GTEST_LIBS_DIR}/ReleaseLibs/${CMAKE_FIND_LIBRARY_PREFIXES}gtest_main${CMAKE_FIND_LIBRARY_SUFFIXES}
            )
        target_link_libraries(${PROJECT_TEST_NAME}
            debug ${GMOCK_LIBS_DIR}/DebugLibs/${CMAKE_FIND_LIBRARY_PREFIXES}gmock${CMAKE_FIND_LIBRARY_SUFFIXES}
            optimized ${GMOCK_LIBS_DIR}/ReleaseLibs/${CMAKE_FIND_LIBRARY_PREFIXES}gmock${CMAKE_FIND_LIBRARY_SUFFIXES}
            )
        target_link_libraries(${PROJECT_TEST_NAME}
            debug ${GMOCK_LIBS_DIR}/DebugLibs/${CMAKE_FIND_LIBRARY_PREFIXES}gmock_main${CMAKE_FIND_LIBRARY_SUFFIXES}
            optimized ${GMOCK_LIBS_DIR}/ReleaseLibs/${CMAKE_FIND_LIBRARY_PREFIXES}gmock_main${CMAKE_FIND_LIBRARY_SUFFIXES}
            )

    endif()

    target_link_libraries(${PROJECT_TEST_NAME} ${PROJECT_LIB_NAME})

    target_link_libraries(${PROJECT_TEST_NAME} ${CMAKE_THREAD_LIBS_INIT})

    add_test(test1 ${PROJECT_TEST_NAME})
endif()
